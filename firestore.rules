rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile.
     *  request.auth.uid == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read/update/delete their profile.
     *  request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile with ID 'user123'.
     *  request.auth.uid == 'user456'
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to booking information.
     * @path /bookings/{bookingId}
     * @allow (create) - User with ID 'user123' can create a booking with userId 'user123'.
     *  request.auth.uid != null AND request.resource.data.userId == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read/update/delete their booking.
     *  request.auth.uid != null AND resource.data.userId == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a booking with userId 'user123'.
     *  request.auth.uid != null AND request.resource.data.userId == 'user123'
     * @deny (update, delete) - User with ID 'user456' cannot update or delete booking with userId 'user123'.
     *  request.auth.uid != null AND resource.data.userId == 'user123'
     * @principle Enforces user-based access control for bookings based on the userId field.
     */
    match /bookings/{bookingId} {
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}