/**
 * @fileoverview Firestore Security Rules for Hajj Booking Tracker.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts booking access based on the userId field within each booking document.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /bookings/{bookingId}: Stores booking data. Only the user who owns the booking (userId matches) can read/write.
 *
 * Key Security Decisions:
 * - Users can only access their own bookings by checking the 'userId' field within each booking document.
 * - Users can only read/write their own profile data under /users/{userId}.
 * - Listing all users is disallowed to protect privacy.
 *
 * Denormalization for Authorization:
 * The 'bookings' collection stores a 'userId' field to allow security rules to quickly check booking ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID of the document owner.
     * @returns {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule set for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile with matching ID.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @allow (update) User with ID 'user123' updates their own profile.
     * @allow (delete) User with ID 'user123' deletes their own profile.
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     * @deny (get) User with ID 'user123' tries to read profile of 'user456'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule set for bookings.
     * @path /bookings/{bookingId}
     * @allow (create) User with ID 'user123' creates a booking with userId 'user123'.
     * @allow (get) User with ID 'user123' reads a booking with userId 'user123'.
     * @allow (update) User with ID 'user123' updates a booking with userId 'user123'.
     * @allow (delete) User with ID 'user123' deletes a booking with userId 'user123'.
     * @deny (create) User with ID 'user123' tries to create a booking for 'user456'.
     * @deny (get) User with ID 'user123' tries to read booking of 'user456'.
     * @principle Enforces document ownership for bookings based on the userId field.
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }
  }
}